generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String    @unique
  password  String
  phoneNo   String
  role      Role
  status    Status    @default(pending)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  events   Event[]    @relation("ManagerEvents")
  services Service[]
  feedback Feedback[]
}

model Event {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  start_date DateTime
  end_date   DateTime
  address    String
  managerId  String    @db.ObjectId
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?

  manager  User?     @relation("ManagerEvents", fields: [managerId], references: [id])
  bookings Booking[]
}

model ServiceCategory {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  services Service[]
}

model Service {
  id            String           @id @default(auto()) @map("_id") @db.ObjectId
  name          String           @default("")
  providerId    String           @db.ObjectId
  categoryId    String?          @db.ObjectId
  description   String
  price         Float
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  deletedAt     DateTime?
  provider      User?            @relation(fields: [providerId], references: [id])
  category      ServiceCategory? @relation(fields: [categoryId], references: [id])
  bookings      Booking[]
  feedbacks     Feedback[]
  subcategories Subcategory[]
}

model Subcategory {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String // "Gujarati Thali"
  serviceId String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  service  Service   @relation(fields: [serviceId], references: [id])
  subtypes Subtype[]
}

model Subtype {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String // "Undhiyu", "Dal-Dhokli"
  price         Float
  subcategoryId String   @db.ObjectId
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  subcategory Subcategory @relation(fields: [subcategoryId], references: [id])
}

model Booking {
  id         String        @id @default(auto()) @map("_id") @db.ObjectId
  eventId    String        @db.ObjectId
  serviceId  String        @db.ObjectId
  status     BookingStatus @default(pending)
  startTime  DateTime
  endTime    DateTime
  totalPrice Float
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  deletedAt  DateTime?
  event      Event?        @relation(fields: [eventId], references: [id])
  service    Service?      @relation(fields: [serviceId], references: [id])
  payments   Payment[]
}

model Payment {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  bookingId     String        @db.ObjectId
  amount        Float
  paymentMethod String
  status        PaymentStatus
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  booking       Booking?      @relation(fields: [bookingId], references: [id])
}

model Feedback {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  serviceId String   @db.ObjectId
  userId    String   @db.ObjectId
  rate      Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  service   Service? @relation(fields: [serviceId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])
}

enum Role {
  event_manager
  service_provider
  admin
}

enum BookingStatus {
  pending
  accepted
  confirmed
  rejected
  cancelled
  approved
  completed
}

enum PaymentStatus {
  pending
  completed
  failed
}

enum Status {
  pending
  approved
  rejected
}
